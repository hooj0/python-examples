#!/usr/bin/env python3
# encoding: utf-8
# @author: hoojo
# @email: hoojo_@126.com
# @github: https://github.com/hooj0
# @create date: 2020-09-25 16:07:27
# @copyright by hoojo@2018
# @changelog python3 `asyncio -> async` example


# ===============================================================================
# 标题：python3 `asyncio -> async` example
# ===============================================================================
# 使用：asyncio 库中的 async 异步示例
#
# 需要使用 async 关键字定义函数，表明异步函数：
#   async def func():
#       pass
#
# 在调用函数时，需要使用 以下方式运行函数：
#   asyncio.get_event_loop().run_until_complete(func())
# -------------------------------------------------------------------------------
# 描述：利用Python协程实现异步程序运行，输出时间等待
# -------------------------------------------------------------------------------


# -------------------------------------------------------------------------------
# 异步模式：
#       使用异步情况下，输出时间等待
# -------------------------------------------------------------------------------
import time
import asyncio


# 使用异步关键字，异步函数
async def hello():
    await asyncio.sleep(1)
    print('Hello World:%s' % time.time())


def run():
    for i in range(5):
        # 接受循环异步程序运行
        loop.run_until_complete(hello())


# 构建创建事件循环
loop = asyncio.get_event_loop()
if __name__ == '__main__':
    run()


# -------------------------------------------------------------------------------
# 结果输出：
#       程序依次执行输出，等待间隔1S
# -------------------------------------------------------------------------------
# Hello World:1601265403.333753
# Hello World:1601265404.33381
# Hello World:1601265405.3338675
# Hello World:1601265406.3339245
# Hello World:1601265407.3339818
